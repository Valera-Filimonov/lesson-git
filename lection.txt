Введение в git
Git – это система контроля версий, которая позволяет сохранять файлы на определённых этапах их существования.
Если сравнивать с обычной жизнью, то git в свою очередь представляет из себя машину времени, которая позволяет вернуться на к тем или иным изменениям файла, которые происходили с ним во время работы.
При обычном сохранении мы можем работать только с последней версией файла, которую мы сохранили, к примеру, вчера вечером. Это тоже удобно, но, если мы захотим посмотреть, что было с нашим документом несколько дней назад, месяцев и т.п, то у нас ничего не получится, а git как раз-таки это позволяет.
Также git позволяет нам работать с удаленными репозиториями.
Удаленные репозитории – если простыми словами, то по сути это облако для хранения файлов (все из нас хоть раз в жизни пользовались подобными сервисами: SberCloud, YandexCloud, iCloud и т.п), которое поддерживает работу с git. Мало того, что мы понимаем, что наши файлы всегда в безопасности, даже если наш компьютер сгорит синим пламенем, так еще мы можем сохранять их различные версии, которые у нас получаются в течении времени.
К сервисам, которые предоставляют подобные услуги удаленных репозиториев относят: GitHub, GitLab, Bitbucket и т.п
В данном курсе мы более подробно остановимся на таком сервисе как GitHub, так как он является самым популярным среди разработчиков, но также затронем и Bitbucket, так как им пользуются в рамках разработки сбера.
Стоит уточнить, что не стоит привязываться к какому-то конкретному сервису, так как принцип работы у них одинаковый и основан на git, который мы будем разбирать в рамках нашего занятия.
Поговорим о ветках и комитах…
Для более простого понимания данных определений введем очень интересную аналогию про сериалы или фильмы.
На данный момент мы будем являться не зрителями, а сценаристами очередного киношедевра.
Комиты – это своего рода записи в нашем сценарии, которые будут представлять из себя полноценную серию или какой-то фрагмент из нашего фильма. После написания мы обязательно сохраняемся, чтобы в дальнейшем могли вернуться и посмотреть, что же мы там такого интересного написали.
В любом хорошем фильме присутствует сюжетная линия и будет классно, если там она будет не одна. Для того, чтобы одновременно работать над разными сюжетными линиями и при этом не потерять взаимосвязь в сценарии, мы вводим понятие ветки.
Ветки – это своего рода сюжетные линии, которые имеют то или иное начало и соответственно конец. Любые сюжетные линии переплетаются между собой, а также имеют возможность сливаться в друг друга, точно также и ветки в git.
На рисунке 1. мы можем увидеть две сюжетные линии нашего фильма. Первая сюжетная линия (голубой цвет) имеет три фрагмента (серии), которые сохранил наш сценарист. Фиолетовая ветка (сюжетная линия) имеет гораздо больше данных фрагментов. Исходя из рассуждений выше, мы можем предположить то, что данный сюжет находит в процессе разработки, так как данные линии никак не пересекаются и пока что никак не взаимодействуют между собой, кроме начала фильма.

Дополнительные материалы:
https://habr.com/ru/post/374887/ (Десять лет Git: интервью с создателем — Линус Торвальдс)
https://www.atlassian.com/ru/git/tutorials/what-is-version-control (Что такое контроль версий? atlassian)

//===========================================================================================================

Еще больше сравнений git c реальной жизнью
Git - это как копирование домашней работы в папку каждый раз, когда ты заканчиваешь работу над ней. Если ты сделал ошибку, ты всегда можешь вернуться к предыдущей версии и исправить ее. Также, если ты работаешь с другом над проектом, Git позволяет вам совместно работать над одним файлом, не мешая друг другу.
Git - это как сохранение игры на компьютере. Когда ты проходишь уровни, игра автоматически сохраняет твой прогресс. Если ты сделал ошибку или проиграл, ты можешь загрузить предыдущее сохранение и начать заново.

Придумайте и запишите пример из жизни, в котором вы делаете последовательные шаги, в которых было бы неплохо делать сохранения, чтобы была возможность возвращаться к ним
//===========================================================================================================

Создание удаленного репозитория на GitHub

1)	Изначально создаем аккаунт на GitHub. Регистрация происходит, как и на большинстве сайтов. https://github.com
P.S В качестве ника (имени пользователя) лучше выбирать что-то осознанное и приличное, так как это будет являться лицом нашего будущего портфолио для работодателя.

2)	Создаем наш первый репозиторий (простыми словами это удаленная директория, которая хранит в себе историю и код нашего проекта). Нажимаем на кнопку “New” в левом верхнем углу экрана.

3)	Далее появляется окно, в котором необходимо заполнить определенные поля.

В поле name пишем название нашего проекта. В нашем случае это test. Поле description (описание) заполнять необязательно

Далее мы выбираем каким будет наш репозиторий: публичный или закрытый. Публичный репозиторий это такой проект, который будет виден абсолютно всем пользователям в интернете, приватный будет виден только тебе и людям, которым ты это разрешишь. В нашем случае мы создаем публичный репозиторий.

Затем необходимо проставить галочку Add a README file. Таким образом мы говорим, чтобы GitHub добавил в наш проект первый файл. README это файл, в котором будет описание нашего проекта и какие-то базовые инструкции, которые мы сможем написать в будущем

Также добавляется файл gitignore, в который записываются все файлы и директории проекта, которые будут игнорироваться и не добавляться в наш удаленный репозиторий (параметры оставляем на none, так как на данный момент он нам не нужен)

Данный пункт говорит нам о том, каким образом наш проект будет распространяться, по какой лицензии и на каких правах. Так как это будет тестовый-домашний проект, то и лицензию мы оставляем с параметром none.

Нажимаем кнопку Create repository 😊

4)	В итоге у нас получился наш первый репозиторий, над которым мы в следующей главе будет проводить различные манипуляции. Также мы можем увидеть в нем единственный файл README.md

Задание
Самостоятельно создать свой собственный открытый, что очень важно, репозиторий и выслать на него ссылку преподавателю. Дополнительно к основному заданию необходимо онлайн на gitHub отредактировать файл README.me и написать там свои пожелания к данному курсу, либо собственные ожидания от него.

//===========================================================================================================

Установка и настройка git
1) Переходим на сайт https://git-scm.com/downloads и скачиваем там последнюю версию git для нашего ПК.

2) Выбираем стандартную установку для версии нашей ОС (в моем случае это 64-bit)
Для того, чтобы узнать скольки разрядная ваша система, необходимо зайти в “Этот компьютер” => Кликаем правой кнопкой мыши => В появившемся окне можно узнать основную информацию о вашем ПК

3) Далее проводим стандартную установку. На все соглашаемся и все параметры оставляем стандартными. После этого, если установка пройдет успешно, то кликнув правой кнопкой мыши на рабочем столе ты увидишь два новых пункта. Это Git Bash here и Git GUI here. Нас больше интересует Git Bash here

4) Открываем Git Bash here и прописываем команду git –version. Если ты сделала все правильно, то увидишь что-то подобное на своем экране. Ваша версия может отличаться от той, которую вы сейчас видите на рисунке 13.

Поздравляю, теперь ты пользователь git 😊

Задание
Самостоятельно проделать данную работу по установке git на свой ПК. Открыть консоль Git Bash на рабочем столе и сделать скриншот, который необходимо будет выслать преподавателю.

//===========================================================================================================

Подключаемся к удаленному репозиторию на GitHub
1)	Переходим на https://github.com и в правом верхнем углу кликаем на свой профиль. В выпадающем меню нас интересует пункт setting.

Рис 14. Пункт setting в главном меню gitHub

2)	Пролистываем чуть ниже и в левом меню находим пункт SSH and GPG keys.


3)	Далее мы видим экран с двумя кнопками и нас на данном этапе интересует кнопка New SSH key. Пока что забываем про нее и переходим на рабочий стол.


4)	Открываем консоль git bash через клик правой кнопки мыши и прописываем следующую команду: ssh-keygen -t ed25519 -b 4096 (ctrl + C или ctrl + V в данной консоли работаю иначе, поэтому на первом этапе следует использовать мышку)

Далее нас просят прописать определенные параметры, но мы это игнорируем и продолжаем нажимать enter. Если все прошло успешно, то на твоем экране будет следующее:

5)	Далее переходишь в папку C:\Users\твой пользователь\.ssh и с помощью блокнота открываешь содержимое файла id_ed25519.pub. 

6)	Нажимаешь ctrl + A и копируешь все содержимое. Переходишь обратно на сайт GitHub и нажимаешь кнопку New SSH key. В появившееся окно вставляешь содержимое данного файла (все случайные отступы и проблемы, обязательно удаляешь). Далее нажимаешь кнопку Add SSH Key.

P.S Нигде не публикуйте данный ключ и не сообщайте его 3 лицам, так как это секретная информация, которая позволит получить доступ к вашему GitHub и не только. На скриншоте тестовый ключ, который я сразу же поменял после того, когда сделал снимок экрана

7)	Затем переходим в наш недавно созданный репозиторий и нажимаем кнопку Code.

Выбираем пункт SSH и копируем предложенную ссылку нашего проекта:

Переходим на рабочий стол и создаем папку, в которой будут храниться все наши проекты. В моем случае я создал папку projects. Кликаем правой кнопкой мыши (кликаем именно в пределах нашей папки, а не в другом месте) и прописываем команду: 
git clone ssh_ссылка_на_наш_проект

P.S при первом клонировании необходимо прописать yes в одном месте, поэтому не пропусти это

8)	Если прошло все успешно, то в твоей папке projects появится папка test, которую ты создал(а) в удаленном репозитории на GitHub. Также там будет файл README.md, который ты также создал(а) при настройке репозитория
 
Поздравляю тебя, ты склонировал(а) свой первый репозиторий 😊
Задание
Самостоятельно проделать все действия, описанные в уроки. Перейти в папку test и открыть консоль git bash, сделать снимок экрана и выслать его своему преподавателю.

//===========================================================================================================

Начало работы с git
Самое первое, что мы сделаем, это разберемся с базовыми командами git. Для того, чтобы все запоминать было проще, то приведем очень интересный пример:
Представь, что у нас есть ракета, площадка для ракеты, груз, который мы хотим отправить на орбитальную станцию и соответственно сама космическая станция
1)	Для начала создадим груз, который мы отправим на нашу станцию. Переходим на нашу площадку (в директорию test) и создаем обычный текстовый файлик.

 

Рис 24. Создаем файл index.txt в папке test

2)	После этого открываем наш бортовой компьютер и узнаем статус нашего отправления (кликаем правой кнопкой мыши в директории и открываем консоль git bash)
Для того, чтобы узнать статус отправления необходимо ввести команду: git status

 

Рис 25. Узнаем статус наших изменений с помощью команды git status

P.S Компьютер нам говорит о том, что у нас появился новый груз, это index.txt и даже предлагает нам загрузить его в ракету.



3)	Для того, чтобы загрузить все на ракету, необходимо прописать команду: git add .

 

Рис 26. Загружаем все на ракету, с помощью команды git add .

P.S точка в конце данной команды говорит нам о том, что мы загружаем все, что есть, так как у данной команды есть множество вариаций, но пользоваться будем пока только этой)

4)	Далее необходимо сделать запись в бортовой журнал, который мы используем, чтобы знать какие изменения и какой груз мы отправили на нашу космическую станцию.

 

Рис 27. Делаем первый коммит, с помощью команды git commit

Для данной операции мы используем команду: git commit -m “Сообщение”
(-m означает, что мы добавляем сообщение в виде комментария, если не использовать данный флаг, то можно не писать сообщение, но на практике так никто не делает)

5)	Мы полностью готовы к запуску ракеты. Для того, чтобы это сделать, необходимо использовать команду: git push

 

Рис 28. Отправляем все наши изменения на удаленный репозитории
Поздравляю! Ракета успешно улетела на удаленную станцию 😊

6)	Для того, чтобы проверить удаленную станцию, то необходимо перейти на сайт GitHub.

 

Рис 29. Убеждаемся, что наши изменения появились на удаленном репозитории 

7)	Внесем какие-нибудь изменения в нашем файле index.txt

 
Рис 30. Добавляем текст в файл index.txt
Главное не забываем сохранить изменения в файле, чтобы это сделать быстрее всего необходимо нажать комбинацию клавиш ctrl + S



Далее повторяем все команды по списку:
git status
git add .
git commit -m “Сообщение”
git push

8)	После этого я добавил еще одно изменение в данном файле и также все отправил в удаленный репозиторий. Во всем этом не было бы смысла, если бы мы не могли смотреть историю всех наших изменений. Для того, что все это посмотреть, необходимо перейти в удаленный репозиторий и нажать на данную кнопку:

 

Рис 31. Кнопка-ссылка, которая позволит нам просмотреть историю изменений в нашем репозитории

 

Рис 32. Смотрим историю изменений нашего репозитория

Также это можно сделать через консоль git bash. Необходимо прописать команду: 
git log

 

Рис 33. Смотрим историю изменений через консоль gitBush

Подведем итоги. Сегодня мы выучили 5 базовых команд, которые позволят нам работать с git. Ты молодец, а далее будет только интереснее

git status (узнаем статус отправки груза)
git add . (загружаем все на ракету)
git commit -m “Сообщение” (пишем сообщение в бортовой журнал)
git push (отправляем все на космическую станцию)
git log (смотрим историю нашего бортового журнала)

Задание
Самостоятельно проделать все действия, описанные в уроки. Сделать как минимум 10 изменений в своем проекте и сохранить их на удаленном репозитории. Выслать ссылку на свой открытый проект преподавателю, чтобы он смог убедиться в том задание выполнено 

//===========================================================================================================

