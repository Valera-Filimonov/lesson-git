Введение в git
Git – это система контроля версий, которая позволяет сохранять файлы на определённых этапах их существования.
Если сравнивать с обычной жизнью, то git в свою очередь представляет из себя машину времени, которая позволяет вернуться на к тем или иным изменениям файла, которые происходили с ним во время работы.
При обычном сохранении мы можем работать только с последней версией файла, которую мы сохранили, к примеру, вчера вечером. Это тоже удобно, но, если мы захотим посмотреть, что было с нашим документом несколько дней назад, месяцев и т.п, то у нас ничего не получится, а git как раз-таки это позволяет.
Также git позволяет нам работать с удаленными репозиториями.
Удаленные репозитории – если простыми словами, то по сути это облако для хранения файлов (все из нас хоть раз в жизни пользовались подобными сервисами: SberCloud, YandexCloud, iCloud и т.п), которое поддерживает работу с git. Мало того, что мы понимаем, что наши файлы всегда в безопасности, даже если наш компьютер сгорит синим пламенем, так еще мы можем сохранять их различные версии, которые у нас получаются в течении времени.
К сервисам, которые предоставляют подобные услуги удаленных репозиториев относят: GitHub, GitLab, Bitbucket и т.п
В данном курсе мы более подробно остановимся на таком сервисе как GitHub, так как он является самым популярным среди разработчиков, но также затронем и Bitbucket, так как им пользуются в рамках разработки сбера.
Стоит уточнить, что не стоит привязываться к какому-то конкретному сервису, так как принцип работы у них одинаковый и основан на git, который мы будем разбирать в рамках нашего занятия.
Поговорим о ветках и комитах…
Для более простого понимания данных определений введем очень интересную аналогию про сериалы или фильмы.
На данный момент мы будем являться не зрителями, а сценаристами очередного киношедевра.
Комиты – это своего рода записи в нашем сценарии, которые будут представлять из себя полноценную серию или какой-то фрагмент из нашего фильма. После написания мы обязательно сохраняемся, чтобы в дальнейшем могли вернуться и посмотреть, что же мы там такого интересного написали.
В любом хорошем фильме присутствует сюжетная линия и будет классно, если там она будет не одна. Для того, чтобы одновременно работать над разными сюжетными линиями и при этом не потерять взаимосвязь в сценарии, мы вводим понятие ветки.
Ветки – это своего рода сюжетные линии, которые имеют то или иное начало и соответственно конец. Любые сюжетные линии переплетаются между собой, а также имеют возможность сливаться в друг друга, точно также и ветки в git.
На рисунке 1. мы можем увидеть две сюжетные линии нашего фильма. Первая сюжетная линия (голубой цвет) имеет три фрагмента (серии), которые сохранил наш сценарист. Фиолетовая ветка (сюжетная линия) имеет гораздо больше данных фрагментов. Исходя из рассуждений выше, мы можем предположить то, что данный сюжет находит в процессе разработки, так как данные линии никак не пересекаются и пока что никак не взаимодействуют между собой, кроме начала фильма.

Дополнительные материалы:
https://habr.com/ru/post/374887/ (Десять лет Git: интервью с создателем — Линус Торвальдс)
https://www.atlassian.com/ru/git/tutorials/what-is-version-control (Что такое контроль версий? atlassian)

//===========================================================================================================