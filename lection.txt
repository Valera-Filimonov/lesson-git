Введение в git
Git – это система контроля версий, которая позволяет сохранять файлы на определённых этапах их существования.
Если сравнивать с обычной жизнью, то git в свою очередь представляет из себя машину времени, которая позволяет вернуться на к тем или иным изменениям файла, которые происходили с ним во время работы.
При обычном сохранении мы можем работать только с последней версией файла, которую мы сохранили, к примеру, вчера вечером. Это тоже удобно, но, если мы захотим посмотреть, что было с нашим документом несколько дней назад, месяцев и т.п, то у нас ничего не получится, а git как раз-таки это позволяет.
Также git позволяет нам работать с удаленными репозиториями.
Удаленные репозитории – если простыми словами, то по сути это облако для хранения файлов (все из нас хоть раз в жизни пользовались подобными сервисами: SberCloud, YandexCloud, iCloud и т.п), которое поддерживает работу с git. Мало того, что мы понимаем, что наши файлы всегда в безопасности, даже если наш компьютер сгорит синим пламенем, так еще мы можем сохранять их различные версии, которые у нас получаются в течении времени.
К сервисам, которые предоставляют подобные услуги удаленных репозиториев относят: GitHub, GitLab, Bitbucket и т.п
В данном курсе мы более подробно остановимся на таком сервисе как GitHub, так как он является самым популярным среди разработчиков, но также затронем и Bitbucket, так как им пользуются в рамках разработки сбера.
Стоит уточнить, что не стоит привязываться к какому-то конкретному сервису, так как принцип работы у них одинаковый и основан на git, который мы будем разбирать в рамках нашего занятия.
Поговорим о ветках и комитах…
Для более простого понимания данных определений введем очень интересную аналогию про сериалы или фильмы.
На данный момент мы будем являться не зрителями, а сценаристами очередного киношедевра.
Комиты – это своего рода записи в нашем сценарии, которые будут представлять из себя полноценную серию или какой-то фрагмент из нашего фильма. После написания мы обязательно сохраняемся, чтобы в дальнейшем могли вернуться и посмотреть, что же мы там такого интересного написали.
В любом хорошем фильме присутствует сюжетная линия и будет классно, если там она будет не одна. Для того, чтобы одновременно работать над разными сюжетными линиями и при этом не потерять взаимосвязь в сценарии, мы вводим понятие ветки.
Ветки – это своего рода сюжетные линии, которые имеют то или иное начало и соответственно конец. Любые сюжетные линии переплетаются между собой, а также имеют возможность сливаться в друг друга, точно также и ветки в git.
На рисунке 1. мы можем увидеть две сюжетные линии нашего фильма. Первая сюжетная линия (голубой цвет) имеет три фрагмента (серии), которые сохранил наш сценарист. Фиолетовая ветка (сюжетная линия) имеет гораздо больше данных фрагментов. Исходя из рассуждений выше, мы можем предположить то, что данный сюжет находит в процессе разработки, так как данные линии никак не пересекаются и пока что никак не взаимодействуют между собой, кроме начала фильма.

Дополнительные материалы:
https://habr.com/ru/post/374887/ (Десять лет Git: интервью с создателем — Линус Торвальдс)
https://www.atlassian.com/ru/git/tutorials/what-is-version-control (Что такое контроль версий? atlassian)

//===========================================================================================================

Еще больше сравнений git c реальной жизнью
Git - это как копирование домашней работы в папку каждый раз, когда ты заканчиваешь работу над ней. Если ты сделал ошибку, ты всегда можешь вернуться к предыдущей версии и исправить ее. Также, если ты работаешь с другом над проектом, Git позволяет вам совместно работать над одним файлом, не мешая друг другу.
Git - это как сохранение игры на компьютере. Когда ты проходишь уровни, игра автоматически сохраняет твой прогресс. Если ты сделал ошибку или проиграл, ты можешь загрузить предыдущее сохранение и начать заново.

Придумайте и запишите пример из жизни, в котором вы делаете последовательные шаги, в которых было бы неплохо делать сохранения, чтобы была возможность возвращаться к ним
//===========================================================================================================

Создание удаленного репозитория на GitHub

1)	Изначально создаем аккаунт на GitHub. Регистрация происходит, как и на большинстве сайтов. https://github.com
P.S В качестве ника (имени пользователя) лучше выбирать что-то осознанное и приличное, так как это будет являться лицом нашего будущего портфолио для работодателя.

2)	Создаем наш первый репозиторий (простыми словами это удаленная директория, которая хранит в себе историю и код нашего проекта). Нажимаем на кнопку “New” в левом верхнем углу экрана.

3)	Далее появляется окно, в котором необходимо заполнить определенные поля.

В поле name пишем название нашего проекта. В нашем случае это test. Поле description (описание) заполнять необязательно

Далее мы выбираем каким будет наш репозиторий: публичный или закрытый. Публичный репозиторий это такой проект, который будет виден абсолютно всем пользователям в интернете, приватный будет виден только тебе и людям, которым ты это разрешишь. В нашем случае мы создаем публичный репозиторий.

Затем необходимо проставить галочку Add a README file. Таким образом мы говорим, чтобы GitHub добавил в наш проект первый файл. README это файл, в котором будет описание нашего проекта и какие-то базовые инструкции, которые мы сможем написать в будущем

Также добавляется файл gitignore, в который записываются все файлы и директории проекта, которые будут игнорироваться и не добавляться в наш удаленный репозиторий (параметры оставляем на none, так как на данный момент он нам не нужен)

Данный пункт говорит нам о том, каким образом наш проект будет распространяться, по какой лицензии и на каких правах. Так как это будет тестовый-домашний проект, то и лицензию мы оставляем с параметром none.

Нажимаем кнопку Create repository 😊

4)	В итоге у нас получился наш первый репозиторий, над которым мы в следующей главе будет проводить различные манипуляции. Также мы можем увидеть в нем единственный файл README.md

Задание
Самостоятельно создать свой собственный открытый, что очень важно, репозиторий и выслать на него ссылку преподавателю. Дополнительно к основному заданию необходимо онлайн на gitHub отредактировать файл README.me и написать там свои пожелания к данному курсу, либо собственные ожидания от него.

//===========================================================================================================

Установка и настройка git
1)	Переходим на сайт https://git-scm.com/downloads и скачиваем там последнюю версию git для нашего ПК.

2)	Выбираем стандартную установку для версии нашей ОС (в моем случае это 64-bit)
Для того, чтобы узнать скольки разрядная ваша система, необходимо зайти в “Этот компьютер” => Кликаем правой кнопкой мыши => В появившемся окне можно узнать основную информацию о вашем ПК

3)	Далее проводим стандартную установку. На все соглашаемся и все параметры оставляем стандартными. После этого, если установка пройдет успешно, то кликнув правой кнопкой мыши на рабочем столе ты увидишь два новых пункта. Это Git Bash here и Git GUI here. Нас больше интересует Git Bash here

4)	Открываем Git Bash here и прописываем команду git –version. Если ты сделала все правильно, то увидишь что-то подобное на своем экране. Ваша версия может отличаться от той, которую вы сейчас видите на рисунке 13.

Поздравляю, теперь ты пользователь git 😊

Задание
Самостоятельно проделать данную работу по установке git на свой ПК. Открыть консоль Git Bash на рабочем столе и сделать скриншот, который необходимо будет выслать преподавателю.

